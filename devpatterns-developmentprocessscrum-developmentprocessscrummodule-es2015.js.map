{"version":3,"sources":["./src/app/devpatterns/developmentprocessscrum/developmentprocessscrum.component.ts","./src/app/devpatterns/developmentprocessscrum/developmentprocessscrum.component.html","./src/app/devpatterns/developmentprocessscrum/developmentprocessscrummodule.ts"],"names":[],"mappings":"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","file":"devpatterns-developmentprocessscrum-developmentprocessscrummodule-es2015.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-developmentprocessscrum',\n  templateUrl: './developmentprocessscrum.component.html',\n  styleUrls: ['./developmentprocessscrum.component.sass']\n})\nexport class DevelopmentprocessscrumComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"content\" role=\"main\" [style.margin-left]=\"'10px'\">\n<br>\n    <a style=\"text-decoration: none;color: rgb(43, 75, 124);display: inline-flex;vertical-align: middle;\"  routerLink=\"/auth/devpatterns\">\n        <mat-icon style=\"color: rgb(43, 75, 124);\"> keyboard_arrow_left</mat-icon> back\n    </a>\n\n    <!-- Resources -->\n    <h2>Scrum Framwork</h2>\n    <br>\n    <h3>About the Framework</h3>\n\n    <p>There are a lot of methodologies, such as waterfall, spiral and too much more, but Scrum is not a methodology, scrum is a framework. \"Scrum implements the scientific method of empiricism. Scrum replaces a programmed algorithmic approach with a heuristic one, with respect for people and self-organization to deal with unpredictability and solving complex problems\" scrum.org .</p>\n\n    <h3>Product Backlog / Worklog</h3>\n\n    <p>The product owner(PO) is constantly collecting feedbacks from customer and thinking about the roadmap of the project, which will generate some new Epics and stories to be worked on (backlog) during the whole project time. The plan for implementing non-functional requirements is detailed by the architecture, so the architect can generate some Epics and stories and review the PO’s artifacts.\n        \n    <br>All stories should be detailed and prioritized by the PO and ux/designer with which is more valuable to the customer, building the screens & flows to add to the stories. Meanwhile the scrum master focuses in coordinating the sprint so the team members can properly work on their tasks.</p>\n\n    <h3>Planning</h3>\n    <p>Before starting the sprint, the planning step should be done.</p>\n\n    <h3>Explanation</h3>\n    <p>The PO and the UX/Designer have the responsibility of collecting some artifacts (stories and tasks) from the Product Backlog and explain to the team how each item will work.</p>\n\n    <h3>Planning poker</h3>\n    <p>All stories should be broken down in tasks. Using a tool like http://www.planitpoker.com/ or cards it is possible verify how many stories can be included in a sprint.</p>\n\n    <h3>Sprint backlog</h3>\n\n    <p>The Scrum master together with the PO decide if the duration of next sprint will change in case of any exception. For each sprint it is necessary to include all prioritized stories to be worked during the sprint and it´s done by the PO and UX Designer.</p>\n\n    <h3>Sprint Interaction</h3>\n    <p>Sprint interaction is the time to development</p>\n\n    <h3>Daily</h3>\n\n    <p>On each day of a sprint, the team holds a daily meeting called the \"daily scrum.” Meetings are typically held in the same location and at the same time each day. Ideally, a daily scrum meeting is held in the morning, as it helps set the context for the coming day's work.\n        The daily scrum meeting is not used as a problem-solving or issue resolution meeting. Issues that are raised are taken offline and usually dealt with by the relevant subgroup immediately after the meeting. During the daily scrum, each team member answers the following three questions:\n        <br><br>\n        1 - What did you do yesterday?<br>\n        2 - What will you do today?<br>\n        3 - Are there any impediments in your way?<br>\n         <br>\n        After the meeting the Scrum Master will take care of the impediments or involve someone to solve it.\n    </p>\n\n    <h3>Code Review</h3>\n    <p>The code review is done via pull request. The developer after committing all in his own branch should create a pull request to development branch adding the reviewer.</p>\n\n    <h3>Retrospective</h3>\n    <p>By definition, a retrospective allows you to look back on past events or situations. According to the Scrum Guide, the sprint retrospective is an “opportunity for the Scrum Team to inspect itself and create a plan for improvements to be enacted during the next <b>Sprint</b>.” Makes sense, especially since the focus of agile development is <b>continuous improvement</b>. In order to get better, you have to know which word to sharpen. The retrospective should create a safe space for people to <b>share their honest feedback</b> on <b>what’s going well</b>, what could be <b>improved</b>, and generate a discussion around things that should <b>change next time</b> around.</p>\n\n    <p>•Game<br>\n        All members write a post-it with the following topics:<br><br>\n        What we should stop doing?<br>\n        What we should start doing?<br>\n        What we should continue doing?<br>\n        Do we have any enhancements?<br><br>\n        In the end, the team should compare the previous restrospective and build a plan to the next Sprint.</p>\n     \n\n    <h3>Full process</h3>\n    <p>The following image represents the framwork</p>\n\n    <img  style=\" width: 40%;border-radius: 10%;\" src=\"../../../assets/images/scrumproc.png\" alt=\"Avatar\" >\n    <br><br>\n    <a style=\"text-decoration: none;color: rgb(43, 75, 124);display: inline-flex;vertical-align: middle;\"  routerLink=\"/devpatterns\">\n        <mat-icon style=\"color: rgb(43, 75, 124);\"> keyboard_arrow_left</mat-icon> back\n    </a>\n    <br>\n<br><br>\n</div>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { DevelopmentprocessscrumComponent } from './developmentprocessscrum.component';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatChipsModule } from '@angular/material/chips';\n\nexport const appRoutes: Routes = [\n    { path: '', component: DevelopmentprocessscrumComponent },\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule.forChild(appRoutes),\n    FlexLayoutModule,\n    MatCardModule,\n    MatIconModule,\n    MatExpansionModule,\n    MatChipsModule,\n  ],\n  declarations: [DevelopmentprocessscrumComponent],\n  exports: [ ]\n})\nexport class DevelopmentprocessscrumModule { }\n"],"sourceRoot":"webpack:///"}